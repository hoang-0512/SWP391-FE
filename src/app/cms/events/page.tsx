"use client";

import { useEffect, useState } from "react";
import { Plus, Download, RefreshCw, AlertTriangle, Clock, User, Users, MapPin, FileText, PhoneCall, UserCheck, Flag } from "lucide-react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useTreatmentHistoryStore } from "@/stores/treatment-history-store";
import { useAuthStore } from "@/stores/auth-store";
import { createTreatmentHistory } from "@/lib/api/treatment-history";
import { EventStats } from "./components/stats-cards";
import { FilterBar } from "./_components/filter-bar";
import { EventTable } from "./components/event-table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { getAllStudents } from "@/lib/api/student";
import { getAllStaffs } from "@/lib/api/staff";
import { updateTreatmentHistory } from "@/lib/api/treatment-history";
import { Student } from "@/lib/type/students";
import { Staff } from "@/lib/type/staff";
import { TreatmentHistory } from "@/lib/type/treatment-history";
import { toast } from "@/components/ui/use-toast";

export default function MedicalEvents() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedStatus, setSelectedStatus] = useState("all");
  const [selectedPriority, setSelectedPriority] = useState("all");
  const [selectedDate, setSelectedDate] = useState("all");

  // State for modals
  const [addEventOpen, setAddEventOpen] = useState(false);
  const [updateEventOpen, setUpdateEventOpen] = useState(false);
  const [processEventOpen, setProcessEventOpen] = useState(false);
  const [viewEventDetailsOpen, setViewEventDetailsOpen] = useState(false);
  const [emergencyProcessOpen, setEmergencyProcessOpen] = useState(false);

  // State for emergency mode
  const [isEmergencyMode, setIsEmergencyMode] = useState(false);

  // State for selected event
  const [selectedEvent, setSelectedEvent] = useState<any>(null);

  // State for initial loading and data
  const [isInitialLoading, setIsInitialLoading] = useState(false);
  const [students, setStudents] = useState<Student[]>([]);
  const [studentsError, setStudentsError] = useState<string | null>(null);
  const [staffs, setStaffs] = useState<Staff[]>([]);
  const [eventError, setEventError] = useState<string | null>(null);

  // State ƒë·ªÉ l∆∞u danh s√°ch h·ªçc sinh ƒë√£ l·ªçc theo l·ªõp
  const [filteredStudents, setFilteredStudents] = useState<Student[]>([]);
  // State ƒë·ªÉ l∆∞u danh s√°ch l·ªõp c√≥ h·ªçc sinh
  const [availableClasses, setAvailableClasses] = useState<string[]>([]);

  // S·ª≠ d·ª•ng store cho treatment history
  const {
    treatmentHistories,
    isLoading,
    error,
    fetchAllTreatmentHistories,
    updateTreatmentHistoryItem,
  } = useTreatmentHistoryStore();

  // L·∫•y th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p
  const { user, profile } = useAuthStore();

  // Form schema for adding/updating event

  const eventFormSchema = z.object({
    title: z.string().min(3, "Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±"),
    student: z.string().min(2, "Vui l√≤ng ch·ªçn h·ªçc sinh"), // ObjectId
    class: z.string().min(1, "Vui l√≤ng ch·ªçn l·ªõp"), // ObjectId
    reporter: z.string().min(1, "Vui l√≤ng ch·ªçn ng∆∞·ªùi b√°o c√°o"), // ObjectId
    description: z.string().min(10, "M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±"),
    location: z.string().min(1, "Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm"),
    priority: z.enum(["Cao", "Trung b√¨nh", "Th·∫•p"]),
    contactStatus: z.string().min(1, "Vui l√≤ng nh·∫≠p tr·∫°ng th√°i li√™n h·ªá"),
    // C√°c tr∆∞·ªùng kh·∫©n c·∫•p (optional)
    immediateAction: z.string().optional(),
    notifyParent: z.boolean().optional(),
    transferToHospital: z.boolean().optional(),
    hospitalName: z.string().optional(),
    emergencyNotes: z.string().optional(),
  });

  // Form for adding new event
  const addEventForm = useForm<z.infer<typeof eventFormSchema>>({
    resolver: zodResolver(eventFormSchema),
    defaultValues: {
      title: "",
      student: "",
      class: "",
      location: "",
      priority: "Trung b√¨nh",
      description: "",
      contactStatus: "Ch∆∞a li√™n h·ªá",
      reporter: "",
      immediateAction: "",
      notifyParent: false,
      transferToHospital: false,
      hospitalName: "",
      emergencyNotes: "",
    },
  });

  useEffect(() => {
    setIsInitialLoading(true);

    // Fetch students and staffs
    Promise.all([getAllStudents(), getAllStaffs()])
      .then(([studentsData, staffsData]) => {
        setStudents(studentsData);
        setFilteredStudents(studentsData); // Kh·ªüi t·∫°o filteredStudents v·ªõi t·∫•t c·∫£ h·ªçc sinh

        // T·∫°o danh s√°ch l·ªõp c√≥ h·ªçc sinh
        const classes = [
          ...new Set(
            studentsData.map((student) => student.class?.name).filter(Boolean)
          ),
        ];
        setAvailableClasses(classes);

        setStaffs(staffsData);
      })
      .catch((error) => {
        setStudentsError(error.message);
      })
      .finally(() => {
        setIsInitialLoading(false);
      });

    // Fetch treatment histories using store
    fetchAllTreatmentHistories();
  }, [fetchAllTreatmentHistories]);

  // Form for updating event
  const updateEventForm = useForm<z.infer<typeof eventFormSchema>>({
    resolver: zodResolver(eventFormSchema),
    defaultValues: {
      title: "",
      student: "",
      class: "",
      location: "",
      priority: "Trung b√¨nh",
      description: "",
      contactStatus: "Ch∆∞a li√™n h·ªá",
      reporter: "",
    },
  });

  // Process event form
  const processFormSchema = z.object({
    _id: z.string().min(1, "ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
    status: z.enum(["processing", "resolved", "pending"]),
    notes: z.string().min(5, "Ghi ch√∫ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±"),
    contactParent: z.boolean(),
    actionTaken: z.string().min(5, "H√†nh ƒë·ªông ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±"),
  });

  const processEventForm = useForm<z.infer<typeof processFormSchema>>({
    resolver: zodResolver(processFormSchema),
    defaultValues: {
      _id: "",
      status: "processing",
      notes: "",
      contactParent: false,
      actionTaken: "",
    },
  });

  // Emergency process form
  const emergencyFormSchema = z.object({
    immediateAction: z.string().min(5, "H√†nh ƒë·ªông ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±"),
    notifyParent: z.boolean(),
    transferToHospital: z.boolean(),
    hospitalName: z.string().optional(),
    notes: z.string().optional(),
  });

  const emergencyProcessForm = useForm<z.infer<typeof emergencyFormSchema>>({
    resolver: zodResolver(emergencyFormSchema),
    defaultValues: {
      immediateAction: "",
      notifyParent: true,
      transferToHospital: false,
      hospitalName: "",
      notes: "",
    },
  });

  // Handle form submissions
  const onAddEvent = async (data: z.infer<typeof eventFormSchema>) => {
    try {
      console.log("Add event data:", data);

      // T·∫°o notes v·ªõi th√¥ng tin kh·∫©n c·∫•p n·∫øu c√≥
      let notes = `Title: ${data.title} | Location: ${data.location} | Priority: ${data.priority} | Class: ${data.class} | Contact Status: ${data.contactStatus}`;

      if (data.priority === "Cao") {
        const emergencyInfo = [];
        if (data.immediateAction)
          emergencyInfo.push(`H√†nh ƒë·ªông t·ª©c th√¨: ${data.immediateAction}`);
        if (data.notifyParent) emergencyInfo.push("ƒê√£ th√¥ng b√°o ph·ª• huynh");
        if (data.transferToHospital)
          emergencyInfo.push(`Chuy·ªÉn vi·ªán: ${data.hospitalName || "Kh√¥ng r√µ"}`);
        if (data.emergencyNotes)
          emergencyInfo.push(`Ghi ch√∫ kh·∫©n c·∫•p: ${data.emergencyNotes}`);

        if (emergencyInfo.length > 0) {
          notes += ` | KH·∫®N C·∫§P: ${emergencyInfo.join(" | ")}`;
        }
      }

      // G·ª≠i ƒë√∫ng schema backend y√™u c·∫ßu
      await createTreatmentHistory({
        title: data.title,
        student: data.student,
        class: data.class,
        staff: data.reporter, // Changed from reporter to staff
        location: data.location,
        priority: data.priority,
        contactStatus: data.contactStatus,
        description: data.description,
        record: "507f1f77bcf86cd799439011", // ObjectId gi·∫£ cho health record
        date: new Date().toISOString(), // Ng√†y hi·ªán t·∫°i
        notes: notes,
      });

      // Refresh danh s√°ch events ngay sau khi t·∫°o th√†nh c√¥ng
      await fetchAllTreatmentHistories();

      setAddEventOpen(false);
      addEventForm.reset();
      setIsEmergencyMode(false); // Reset emergency mode

      if (data.priority === "Cao") {
        alert(
          "üö® Th√™m s·ª± c·ªë kh·∫©n c·∫•p th√†nh c√¥ng! Vui l√≤ng x·ª≠ l√Ω ngay l·∫≠p t·ª©c!"
        );
      } else {
        alert("Th√™m s·ª± c·ªë y t·∫ø th√†nh c√¥ng!");
      }
    } catch (error) {
      alert("Kh√¥ng th·ªÉ th√™m s·ª± ki·ªán m·ªõi!");
      console.error(error);
    }
  };

  const onUpdateEvent = async (data: z.infer<typeof eventFormSchema>) => {
    try {
      console.log("Update event data:", data);

      if (!selectedEvent || !selectedEvent._id) {
        alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin s·ª± ki·ªán!");
        return;
      }

      // G·ªçi API c·∫≠p nh·∫≠t theo backend schema
      await updateTreatmentHistoryItem(selectedEvent._id, {
        student: data.student,
        staff: data.reporter || selectedEvent.staff || "Unknown Staff", // Changed from reporter to staff
        record: selectedEvent.record || "507f1f77bcf86cd799439011", // ObjectId gi·∫£
        date: selectedEvent.date || new Date().toISOString(),
        description: data.description,
        notes: `Title: ${data.title} | Location: ${data.location} | Priority: ${data.priority} | Class: ${data.class} | Contact Status: ${data.contactStatus}`,
      });

      setUpdateEventOpen(false);
      updateEventForm.reset();
      alert("C·∫≠p nh·∫≠t s·ª± c·ªë y t·∫ø th√†nh c√¥ng!");
    } catch (error) {
      console.error("Error updating event:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ª± c·ªë y t·∫ø!");
    }
  };

  const onProcessEvent = async (data: z.infer<typeof processFormSchema>) => {
    try {
      console.log("Process event data:", data);
      console.log("Event ID being processed:", data._id);

      // C·∫≠p nh·∫≠t treatment history v·ªõi th√¥ng tin x·ª≠ l√Ω
      const existingEvent = treatmentHistories.find((e) => e._id === data._id);
      const currentNotes = existingEvent?.notes || "";
      const processInfo = `Contact Parent: ${data.contactParent} | Action: ${data.actionTaken} | Process Notes: ${data.notes}`;

      await updateTreatmentHistoryItem(data._id, {
        status: data.status, // C·∫≠p nh·∫≠t tr∆∞·ªùng status th·ª±c t·∫ø
        notes: currentNotes ? `${currentNotes} | ${processInfo}` : processInfo,
      });

      setProcessEventOpen(false);
      processEventForm.reset();
      alert("C·∫≠p nh·∫≠t tr·∫°ng th√°i x·ª≠ l√Ω th√†nh c√¥ng!");
    } catch (error) {
      console.error("Error processing event:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i x·ª≠ l√Ω!");
    }
  };

  const onEmergencyProcess = async (
    data: z.infer<typeof emergencyFormSchema>
  ) => {
    try {
      console.log("Emergency process data:", data);

      if (!selectedEvent || !selectedEvent._id) {
        alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin s·ª± ki·ªán!");
        return;
      }

      // C·∫≠p nh·∫≠t treatment history v·ªõi th√¥ng tin x·ª≠ l√Ω kh·∫©n c·∫•p
      await updateTreatmentHistoryItem(selectedEvent._id, {
        status: "processing", // S·ª≠ d·ª•ng tr·∫°ng th√°i ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong schema
        actionTaken:
          data.immediateAction +
          (data.transferToHospital
            ? ` | Chuy·ªÉn ƒë·∫øn b·ªánh vi·ªán: ${data.hospitalName || "Kh√¥ng r√µ"}`
            : ""),
        notes: data.notes || "",
        contactParent: data.notifyParent,
        priority: "Cao", // T·ª± ƒë·ªông n√¢ng m·ª©c ƒë·ªô ∆∞u ti√™n l√™n cao
      });

      // Refresh danh s√°ch events sau khi c·∫≠p nh·∫≠t
      await fetchAllTreatmentHistories();
      const processedData = ensureCreatedAt(treatmentHistories);
      // setEventList(processedData); // This line was removed as per the edit hint

      setEmergencyProcessOpen(false);
      emergencyProcessForm.reset();
      alert("X·ª≠ l√Ω s·ª± ki·ªán kh·∫©n c·∫•p th√†nh c√¥ng!");
    } catch (error) {
      console.error("Error processing emergency:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t x·ª≠ l√Ω kh·∫©n c·∫•p!");
    }
  };

  // Handle opening modals with event data
  const handleViewDetails = (event: any) => {
    setSelectedEvent(event);
    setViewEventDetailsOpen(true);
  };

  const handleUpdateEvent = (event: any) => {
    setSelectedEvent(event);
    updateEventForm.reset({
      title: event.title,
      student: event.student,
      class: event.class,
      location: event.location,
      priority: event.priority,
      description: event.description,
      contactStatus: event.contactStatus || "Ch∆∞a li√™n h·ªá",
      reporter: event.reporter || "",
    });
    setUpdateEventOpen(true);
  };

  const handleProcessEvent = (event: any) => {
    setSelectedEvent(event);
    console.log("Selected event for processing:", event);
    processEventForm.reset({
      _id: event._id || "",
      status: "processing",
      notes: "",
      contactParent: false,
      actionTaken: "",
    });
    setProcessEventOpen(true);
  };

  const handleEmergencyProcess = (event: any) => {
    setSelectedEvent(event);
    emergencyProcessForm.reset();
    setEmergencyProcessOpen(true);
  };

  // Filter events based on search and filters
  const filteredEvents = [...treatmentHistories]
    .sort((a, b) => {
      const dateA = new Date(a.createdAt || a.date || 0).getTime();
      const dateB = new Date(b.createdAt || b.date || 0).getTime();
      if (dateB !== dateA) return dateB - dateA;
      // N·∫øu th·ªùi gian b·∫±ng nhau, sort ti·∫øp theo _id (n·∫øu c√≥)
      if (a._id && b._id) return b._id.localeCompare(a._id);
      return 0;
    })
    .filter((event) => {
      // L·∫•y ti√™u ƒë·ªÅ t·ª´ title ho·∫∑c t·ª´ notes (n·∫øu c√≥)
      let eventTitle = event.title || "";
      if (!eventTitle && event.notes) {
        const match = event.notes.match(/Title: ([^|]+)/);
        if (match) eventTitle = match[1].trim();
      }
      // Lo·∫°i b·ªè s·ª± ki·ªán c√≥ ti√™u ƒë·ªÅ 'Ng√£ c·∫ßu thang'
      if (eventTitle === "Ng√£ c·∫ßu thang") return false;

      const eventStudent =
        typeof event.student === "object" && event.student?.name
          ? event.student.name
          : typeof event.student === "string"
          ? event.student
          : "";

      const matchesSearch =
        eventStudent.toLowerCase().includes(searchTerm.toLowerCase()) ||
        eventTitle.toLowerCase().includes(searchTerm.toLowerCase()) ||
        event.location?.toLowerCase().includes(searchTerm.toLowerCase());

      const matchesStatus =
        selectedStatus === "all" || event.status === selectedStatus;

      const matchesPriority =
        selectedPriority === "all" || event.priority === selectedPriority;

      // Date filtering logic
      let matchesDate = true;
      if (selectedDate !== "all" && event.createdAt) {
        const eventDate = new Date(event.createdAt);
        const now = new Date();

        switch (selectedDate) {
          case "today":
            matchesDate = eventDate.toDateString() === now.toDateString();
            break;
          case "week":
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            matchesDate = eventDate >= weekAgo;
            break;
          case "month":
            const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
            matchesDate = eventDate >= monthAgo;
            break;
        }
      }

      return matchesSearch && matchesStatus && matchesPriority && matchesDate;
    });

  // Calculate stats
  const stats = {
    total: treatmentHistories.length,
    pending: treatmentHistories.filter((e) => e.status === "pending").length,
    processing: treatmentHistories.filter((e) => e.status === "processing")
      .length,
    resolved: treatmentHistories.filter((e) => e.status === "resolved").length,
    high: treatmentHistories.filter((e) => e.priority === "Cao").length,
    medium: treatmentHistories.filter((e) => e.priority === "Trung b√¨nh")
      .length,
    low: treatmentHistories.filter((e) => e.priority === "Th·∫•p").length,
  };

  // Handle export to Excel
  const handleExportExcel = () => {
    try {
      const headers = [
        "Ti√™u ƒë·ªÅ",
        "H·ªçc sinh",
        "L·ªõp",
        "ƒê·ªãa ƒëi·ªÉm",
        "M·ª©c ƒë·ªô ∆∞u ti√™n",
        "Tr·∫°ng th√°i",
        "Ng√†y t·∫°o",
      ];
      const csvContent = [
        headers.join(","),
        ...filteredEvents.map((event) => {
          const studentName =
            typeof event.student === "object" && event.student?.name
              ? event.student.name
              : typeof event.student === "string"
              ? event.student
              : "N/A";

          return [
            `"${event.title || "N/A"}"`,
            `"${studentName}"`,
            `"${event.class || "N/A"}"`,
            `"${event.location || "N/A"}"`,
            `"${event.priority || "N/A"}"`,
            `"${event.status || "pending"}"`,
            `"${
              event.createdAt
                ? new Date(event.createdAt).toLocaleDateString("vi-VN")
                : "N/A"
            }"`,
          ].join(",");
        }),
      ].join("\n");

      const blob = new Blob(["\ufeff" + csvContent], {
        type: "text/csv;charset=utf-8;",
      });
      const link = document.createElement("a");
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute(
        "download",
        `danh-sach-su-kien-y-te-${new Date().toISOString().split("T")[0]}.csv`
      );
      link.style.visibility = "hidden";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (err) {
      console.error("Export error:", err);
    }
  };

  useEffect(() => {
    fetchAllTreatmentHistories()
      .then(() => {
        console.log("Fetched treatment histories successfully");
      })
      .catch((error) => {
        console.error("Error fetching treatment histories:", error);
      });
  }, [fetchAllTreatmentHistories]);

  // H√†m ƒë·∫£m b·∫£o m·ªói s·ª± ki·ªán c√≥ createdAt
  const ensureCreatedAt = (events: any[]) => {
    return events.map((event) => {
      if (!event.createdAt) {
        console.log("Adding missing createdAt to event:", event._id);
        return {
          ...event,
          createdAt: new Date().toISOString(),
        };
      }
      return event;
    });
  };

  // H√†m l·ªçc h·ªçc sinh theo l·ªõp
  const filterStudentsByClass = (selectedClass: string) => {
    if (!selectedClass || selectedClass === "") {
      setFilteredStudents(students);
      return;
    }

    // L·ªçc h·ªçc sinh theo l·ªõp ƒë√£ ch·ªçn
    const filtered = students.filter((student) => {
      // Ki·ªÉm tra l·ªõp c·ªßa h·ªçc sinh - d·ª±a tr√™n c·∫•u tr√∫c d·ªØ li·ªáu th·ª±c t·∫ø
      const studentClassName = student.class?.name || "";
      return studentClassName === selectedClass;
    });

    setFilteredStudents(filtered);
  };

  const refreshEvents = () => {
    fetchAllTreatmentHistories();
  };

  // T·ª± ƒë·ªông set reporter khi m·ªü form th√™m m·ªõi
  const handleOpenAddEvent = () => {
    setAddEventOpen(true);
    setIsEmergencyMode(false); // Reset emergency mode
    // T·ª± ƒë·ªông set ng∆∞·ªùi b√°o c√°o l√† user ƒëang ƒëƒÉng nh·∫≠p
    if (user && user._id) {
      addEventForm.setValue("reporter", user._id);
    } else {
      // N·∫øu kh√¥ng c√≥ _id, kh√¥ng set ho·∫∑c c√≥ th·ªÉ b√°o l·ªói
      addEventForm.setValue("reporter", "");
    }
  };

  const handlePriorityChange = (value: "Cao" | "Trung b√¨nh" | "Th·∫•p") => {
    setIsEmergencyMode(value === "Cao");
    addEventForm.setValue("priority", value);
  };

  // H√†m x·ª≠ l√Ω khi click stats card
  const handleStatsCardClick = (type: string) => {
    if (type === "all") {
      setSelectedStatus("all");
      setSelectedPriority("all");
    } else if (type === "pending") {
      setSelectedStatus("pending");
      setSelectedPriority("all");
    } else if (type === "resolved") {
      setSelectedStatus("resolved");
      setSelectedPriority("all");
    } else if (type === "high") {
      setSelectedPriority("Cao");
      setSelectedStatus("all");
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Loading Header */}
          <div className="mb-8">
            <div className="flex items-center space-x-4 mb-6">
              <div className="w-14 h-14 bg-gradient-to-br from-red-500 to-red-600 rounded-2xl shadow-lg flex items-center justify-center animate-pulse">
                <AlertTriangle className="w-7 h-7 text-white" />
              </div>
              <div>
                <div className="h-8 w-64 bg-gray-200 rounded-lg animate-pulse mb-2"></div>
                <div className="h-4 w-96 bg-gray-200 rounded animate-pulse"></div>
              </div>
            </div>
          </div>

          {/* Loading Stats */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {[1, 2, 3, 4].map((i) => (
              <div
                key={i}
                className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl"
              >
                <div className="h-4 w-24 bg-gray-200 rounded animate-pulse mb-3"></div>
                <div className="h-8 w-16 bg-gray-200 rounded animate-pulse"></div>
              </div>
            ))}
          </div>

          {/* Loading Content */}
          <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
            <div className="xl:col-span-1">
              <div className="space-y-6">
                <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl">
                  <div className="h-6 w-32 bg-gray-200 rounded animate-pulse mb-4"></div>
                  <div className="space-y-3">
                    {[1, 2, 3].map((i) => (
                      <div
                        key={i}
                        className="h-12 bg-gray-200 rounded-lg animate-pulse"
                      ></div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            <div className="xl:col-span-4">
              <div className="bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-6">
                <div className="h-8 w-48 bg-gray-200 rounded animate-pulse mb-6"></div>
                <div className="space-y-4">
                  {[1, 2, 3, 4, 5].map((i) => (
                    <div
                      key={i}
                      className="h-16 bg-gray-200 rounded-lg animate-pulse"
                    ></div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Error Header */}
          <div className="mb-8">
            <div className="flex items-center space-x-4 mb-6">
              <div className="w-14 h-14 bg-gradient-to-br from-red-500 to-red-600 rounded-2xl shadow-lg flex items-center justify-center">
                <AlertTriangle className="w-7 h-7 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  Qu·∫£n l√Ω s·ª± c·ªë y t·∫ø
                </h1>
                <p className="text-gray-600 mt-1">
                  H·ªá th·ªëng theo d√µi v√† x·ª≠ l√Ω s·ª± c·ªë y t·∫ø trong tr∆∞·ªùng h·ªçc
                </p>
              </div>
            </div>
          </div>

          {/* Error Content */}
          <div className="flex justify-center items-center py-16">
            <div className="text-center max-w-md">
              <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <AlertTriangle className="w-10 h-10 text-red-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                ƒê√£ x·∫£y ra l·ªói
              </h3>
              <p className="text-red-600 mb-6">{error}</p>
              <Button
                onClick={() => window.location.reload()}
                className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg"
              >
                Th·ª≠ l·∫°i
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header Section - Centered, icon on top, title and description below */}
        <div className="mb-10 flex flex-col items-center justify-center text-center">
          <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-red-600 rounded-2xl shadow-lg flex items-center justify-center mb-4">
            <AlertTriangle className="w-9 h-9 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Qu·∫£n l√Ω s·ª± c·ªë y t·∫ø</h1>
          <p className="text-gray-600 max-w-xl">
            H·ªá th·ªëng theo d√µi v√† x·ª≠ l√Ω s·ª± c·ªë y t·∫ø trong tr∆∞·ªùng h·ªçc
          </p>
        </div>

        {/* Stats Cards - 4 columns, soft color, icon right, rounded, shadow */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-10">
          <div className="bg-white rounded-2xl shadow-xl p-6 flex items-center justify-between">
            <div>
              <div className="text-3xl font-bold text-blue-700">{stats.total}</div>
              <div className="text-sm text-gray-500 mt-1">T·ªïng s·ª± ki·ªán</div>
            </div>
            <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
              <AlertTriangle className="w-6 h-6 text-blue-500" />
            </div>
          </div>
          <div className="bg-white rounded-2xl shadow-xl p-6 flex items-center justify-between">
            <div>
              <div className="text-3xl font-bold text-yellow-600">{stats.pending}</div>
              <div className="text-sm text-gray-500 mt-1">Ch·ªù x·ª≠ l√Ω</div>
            </div>
            <div className="w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center">
              <Clock className="w-6 h-6 text-yellow-500" />
            </div>
          </div>
          <div className="bg-white rounded-2xl shadow-xl p-6 flex items-center justify-between">
            <div>
              <div className="text-3xl font-bold text-red-600">{stats.high}</div>
              <div className="text-sm text-gray-500 mt-1">∆Øu ti√™n cao</div>
            </div>
            <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
              <Flag className="w-6 h-6 text-red-500" />
            </div>
          </div>
          <div className="bg-white rounded-2xl shadow-xl p-6 flex items-center justify-between">
            <div>
              <div className="text-3xl font-bold text-emerald-600">{stats.resolved}</div>
              <div className="text-sm text-gray-500 mt-1">ƒê√£ gi·∫£i quy·∫øt</div>
            </div>
            <div className="w-10 h-10 bg-emerald-100 rounded-full flex items-center justify-center">
              <UserCheck className="w-6 h-6 text-emerald-500" />
            </div>
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
          {/* Enhanced Sidebar */}
          <div className="xl:col-span-1">
            <div className="sticky top-8 space-y-6">
              {/* Quick Actions Card */}
              <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl rounded-2xl overflow-hidden">
                {/* <CardHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
                  <CardTitle className="text-lg font-semibold flex items-center">
                    <span className="mr-2">‚ö°</span>
                    Thao t√°c nhanh
                  </CardTitle>
                </CardHeader> */}
                <CardContent className="p-6 space-y-4 flex flex-col items-center">
                  <Button
                    onClick={handleOpenAddEvent}
                    className="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white py-3 px-4 rounded-xl transition-all duration-300 flex items-center justify-center space-x-3 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                  >
                    <span className="font-medium">Th√™m s·ª± c·ªë</span>
                  </Button>

                  <Button
                    onClick={handleExportExcel}
                    className="w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white py-3 px-4 rounded-xl transition-all duration-300 flex items-center justify-center space-x-3 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                  >
                    <Download className="h-5 w-5" />
                    <span className="font-medium">Xu·∫•t Excel</span>
                  </Button>

                  {/* ƒê√£ x√≥a n√∫t L√†m m·ªõi */}
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Enhanced Main Content */}
          <div className="xl:col-span-4">
            <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-2xl rounded-2xl overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
                <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                  <div>
                    <CardTitle className="text-2xl font-bold text-gray-900 flex items-center">
                      <span className="mr-3">üìã</span>
                      Danh s√°ch s·ª± c·ªë y t·∫ø
                    </CardTitle>
                    <CardDescription className="text-gray-600 mt-2">
                      Qu·∫£n l√Ω v√† theo d√µi t·∫•t c·∫£ s·ª± c·ªë y t·∫ø trong h·ªá th·ªëng
                    </CardDescription>
                  </div>
                  {/* X√≥a ph·∫ßn t·ªïng s·ªë s·ª± ki·ªán */}
                  {/* <div className="flex items-center space-x-2">
                    <div className="text-sm text-gray-500">
                      T·ªïng: <span className="font-semibold text-gray-700">{filteredEvents.length}</span> s·ª± ki·ªán
                    </div>
                  </div> */}
                </div>
              </CardHeader>
              <CardContent className="p-6">
                <div className="space-y-6">
                  <FilterBar
                    onSearchChange={setSearchTerm}
                    onStatusFilterChange={setSelectedStatus}
                    onPriorityFilterChange={setSelectedPriority}
                    onDateFilterChange={setSelectedDate}
                  />
                  <div className="mt-6">
                    <EventTable
                      events={filteredEvents}
                      onView={handleViewDetails}
                      onProcess={handleProcessEvent}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Dialogs: Add, Update, View, Process, EmergencyProcess gi·ªØ nguy√™n, ch·ªâ ch·ªânh className cho ƒë·ªìng b·ªô style (bo g√≥c, shadow, m√†u s·∫Øc) */}
      {/* ... gi·ªØ nguy√™n c√°c Dialog, ch·ªâ c·∫ßn ch·ªânh className n·∫øu c·∫ßn */}
      {/* Add Event Dialog */}
      <Dialog open={addEventOpen} onOpenChange={setAddEventOpen}>
        <DialogContent
          className={`max-w-4xl max-h-[95vh] rounded-3xl shadow-2xl overflow-hidden border-0 ${
            isEmergencyMode
              ? "bg-gradient-to-br from-red-50 via-pink-50 to-orange-50 border-2 border-red-200"
              : "bg-gradient-to-br from-white to-gray-50"
          }`}
        >
          <DialogHeader
            className={`sticky top-0 z-10 backdrop-blur-sm ${
              isEmergencyMode
                ? "bg-gradient-to-r from-red-600 via-red-700 to-red-800 text-white rounded-t-3xl shadow-lg"
                : "bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-t-3xl shadow-lg"
            }`}
          >
            <div className="flex items-center justify-between p-6">
              <div className="flex items-center space-x-4">
                <div
                  className={`w-12 h-12 rounded-2xl flex items-center justify-center ${
                    isEmergencyMode
                      ? "bg-red-500/20 backdrop-blur-sm"
                      : "bg-white/20 backdrop-blur-sm"
                  }`}
                >
                  {isEmergencyMode ? (
                    <span className="text-2xl animate-pulse">üö®</span>
                  ) : (
                    <AlertTriangle className="w-6 h-6 text-white" />
                  )}
                </div>
                <div>
                  <DialogTitle
                    className={`text-2xl font-bold ${
                      isEmergencyMode ? "text-white" : "text-white"
                    }`}
                  >
                    {isEmergencyMode
                      ? "TH√äM S·ª∞ C·ªê KH·∫®N C·∫§P"
                      : " Th√™m s·ª± c·ªë y t·∫ø"}
                  </DialogTitle>
                  <DialogDescription
                    className={`mt-1 ${
                      isEmergencyMode ? "text-red-100" : "text-blue-100"
                    }`}
                  >
                    {isEmergencyMode
                      ? "S·ª± c·ªë nghi√™m tr·ªçng - C·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c!"
                      : "Nh·∫≠p th√¥ng tin chi ti·∫øt v·ªÅ s·ª± c·ªë y t·∫ø m·ªõi"}
                  </DialogDescription>
                </div>
              </div>
              {isEmergencyMode && (
                <div className="bg-red-500/80 backdrop-blur-sm text-white px-4 py-2 rounded-full text-sm font-bold animate-pulse border border-red-300">
                  ‚ö†Ô∏è KH·∫®N C·∫§P
                </div>
              )}
            </div>
          </DialogHeader>

          <Form {...addEventForm}>
            <form
              onSubmit={addEventForm.handleSubmit(onAddEvent)}
              className="space-y-6 max-h-[calc(95vh-200px)] overflow-y-auto px-6 py-6 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100"
            >
              {/* Emergency Alert */}
              {isEmergencyMode && (
                <div className="mb-6 p-6 bg-gradient-to-r from-red-100 to-red-50 border-l-4 border-red-500 rounded-r-2xl shadow-lg">
                  <div className="flex items-start space-x-4">
                    <div className="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center flex-shrink-0">
                      <span className="text-white text-lg">‚ö†Ô∏è</span>
                    </div>
                    <div>
                      <h4 className="font-bold text-red-800 text-lg mb-2">
                        {" "}
                        S·ª∞ C·ªê KH·∫®N C·∫§P
                      </h4>
                      <p className="text-red-700 text-base leading-relaxed">
                        Vui l√≤ng x·ª≠ l√Ω ngay l·∫≠p t·ª©c v√† tu√¢n th·ªß quy tr√¨nh kh·∫©n
                        c·∫•p! ƒê·∫£m b·∫£o an to√†n cho h·ªçc sinh l√† ∆∞u ti√™n h√†ng ƒë·∫ßu.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* Emergency Checklist */}
              {isEmergencyMode && (
                <div className="mb-6 p-6 bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-2xl shadow-lg">
                  <h4 className="font-bold text-yellow-800 mb-4 flex items-center text-lg">
                    <span className="mr-3 text-xl">‚è∞</span>‚úÖ Checklist kh·∫©n
                    c·∫•p:
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                    {[
                      "ƒê√°nh gi√° t√¨nh tr·∫°ng h·ªçc sinh",
                      "G·ªçi c·∫•p c·ª©u (n·∫øu c·∫ßn)",
                      "Li√™n h·ªá ph·ª• huynh ngay",
                      "Chu·∫©n b·ªã chuy·ªÉn vi·ªán",
                      "Ghi ch√©p ƒë·∫ßy ƒë·ªß",
                      "Th√¥ng b√°o ban gi√°m hi·ªáu",
                    ].map((item, index) => (
                      <div
                        key={index}
                        className="flex items-center space-x-3 p-2 bg-white/50 rounded-lg"
                      >
                        <div className="w-3 h-3 bg-green-500 rounded-full flex-shrink-0"></div>
                        <span className="text-gray-700 font-medium">
                          {item}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              {/* Basic Information Section */}
              <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-gray-100">
                <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                  <span className="mr-2">üìù</span>
                  Th√¥ng tin c∆° b·∫£n
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <FormField
                    control={addEventForm.control}
                    name="title"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-gray-700 font-medium">
                          Ti√™u ƒë·ªÅ s·ª± ki·ªán
                        </FormLabel>
                        <FormControl>
                          <Input
                            placeholder="Nh·∫≠p ti√™u ƒë·ªÅ s·ª± ki·ªán..."
                            className="rounded-xl border-gray-200 focus:border-blue-500 focus:ring-blue-500"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={addEventForm.control}
                    name="student"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-gray-700 font-medium">
                          H·ªçc sinh
                        </FormLabel>
                        <FormControl>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                          >
                            <SelectTrigger className="rounded-xl border-gray-200 focus:border-blue-500 focus:ring-blue-500">
                              <SelectValue placeholder="Ch·ªçn h·ªçc sinh" />
                            </SelectTrigger>
                            <SelectContent className="rounded-xl">
                              {filteredStudents.length === 0 ? (
                                <div className="p-4 text-center text-gray-500 text-sm">
                                  <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-2">
                                    <User className="w-6 h-6 text-gray-400" />
                                  </div>
                                  Kh√¥ng c√≥ h·ªçc sinh trong l·ªõp n√†y
                                </div>
                              ) : (
                                filteredStudents.map((student) => {
                                  const studentId = student.student?._id || "";
                                  const studentName =
                                    student.student?.name || "Kh√¥ng r√µ";
                                  return (
                                    <SelectItem
                                      key={studentId}
                                      value={studentId}
                                      className="rounded-lg"
                                    >
                                      <div className="flex items-center space-x-2">
                                        <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                                          <User className="w-3 h-3 text-blue-600" />
                                        </div>
                                        <span>{studentName}</span>
                                      </div>
                                    </SelectItem>
                                  );
                                })
                              )}
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={addEventForm.control}
                    name="class"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-gray-700 font-medium">
                          L·ªõp
                        </FormLabel>
                        <Select
                          onValueChange={(value) => {
                            field.onChange(value);
                            filterStudentsByClass(value);
                            addEventForm.setValue("student", "");
                          }}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className="rounded-xl border-gray-200 focus:border-blue-500 focus:ring-blue-500">
                              <SelectValue placeholder="Ch·ªçn l·ªõp" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent className="rounded-xl">
                            {availableClasses.length === 0 ? (
                              <div className="p-4 text-center text-gray-500 text-sm">
                                <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-2">
                                  <Users className="w-6 h-6 text-gray-400" />
                                </div>
                                Kh√¥ng c√≥ l·ªõp n√†o c√≥ h·ªçc sinh
                              </div>
                            ) : (
                              availableClasses.map((className) => (
                                <SelectItem
                                  key={className}
                                  value={className}
                                  className="rounded-lg"
                                >
                                  <div className="flex items-center space-x-2">
                                    <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                                      <Users className="w-3 h-3 text-green-600" />
                                    </div>
                                    <span>{className}</span>
                                  </div>
                                </SelectItem>
                              ))
                            )}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={addEventForm.control}
                    name="location"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-gray-700 font-medium">
                          ƒê·ªãa ƒëi·ªÉm
                        </FormLabel>
                        <FormControl>
                          <Input
                            placeholder="ƒê·ªãa ƒëi·ªÉm x·∫£y ra s·ª± c·ªë..."
                            className="rounded-xl border-gray-200 focus:border-blue-500 focus:ring-blue-500"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={addEventForm.control}
                    name="reporter"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-gray-700 font-medium">
                          Ng∆∞·ªùi b√°o c√°o
                        </FormLabel>
                        <FormControl>
                          <Input
                            value={
                              profile?.name || user?.email || "Kh√¥ng x√°c ƒë·ªãnh"
                            }
                            disabled
                            className="rounded-xl bg-gray-50 text-gray-600 border-gray-200"
                          />
                        </FormControl>
                        <FormDescription className="text-xs text-gray-500 flex items-center">
                          <span className="mr-1">üîí</span>
                          T·ª± ƒë·ªông l·∫•y t·ª´ t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={addEventForm.control}
                    name="priority"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel
                          className={`font-medium ${
                            isEmergencyMode ? "text-red-700" : "text-gray-700"
                          }`}
                        >
                          M·ª©c ƒë·ªô ∆∞u ti√™n
                        </FormLabel>
                        <Select
                          onValueChange={(
                            value: "Cao" | "Trung b√¨nh" | "Th·∫•p"
                          ) => {
                            handlePriorityChange(value);
                            field.onChange(value);
                          }}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger
                              className={`rounded-xl border-gray-200 focus:border-blue-500 focus:ring-blue-500 ${
                                isEmergencyMode
                                  ? "border-red-300 bg-red-50"
                                  : ""
                              }`}
                            >
                              <SelectValue placeholder="Ch·ªçn m·ª©c ƒë·ªô" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent className="rounded-xl">
                            <SelectItem
                              value="Cao"
                              className="text-red-600 font-semibold rounded-lg"
                            >
                              <div className="flex items-center space-x-2">
                                <span className="text-lg">üö®</span>
                                <span>Cao (Kh·∫©n c·∫•p)</span>
                              </div>
                            </SelectItem>
                            <SelectItem
                              value="Trung b√¨nh"
                              className="rounded-lg"
                            >
                              <div className="flex items-center space-x-2">
                                <span className="text-lg">‚ö°</span>
                                <span>Trung b√¨nh</span>
                              </div>
                            </SelectItem>
                            <SelectItem value="Th·∫•p" className="rounded-lg">
                              <div className="flex items-center space-x-2">
                                <span className="text-lg">üìã</span>
                                <span>Th·∫•p</span>
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              {/* Description and Contact Status Section */}
              <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-gray-100">
                <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                  <span className="mr-2">üìã</span>
                  Th√¥ng tin chi ti·∫øt
                </h3>
                <div className="space-y-6">
                  <FormField
                    control={addEventForm.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-gray-700 font-medium">
                          M√¥ t·∫£ chi ti·∫øt
                        </FormLabel>
                        <FormControl>
                          <Textarea
                            placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·ª± c·ªë y t·∫ø..."
                            className="min-h-[120px] rounded-xl border-gray-200 focus:border-blue-500 focus:ring-blue-500 resize-none"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={addEventForm.control}
                    name="contactStatus"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-gray-700 font-medium">
                          Tr·∫°ng th√°i li√™n h·ªá ph·ª• huynh
                        </FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className="rounded-xl border-gray-200 focus:border-blue-500 focus:ring-blue-500">
                              <SelectValue placeholder="Tr·∫°ng th√°i li√™n h·ªá" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent className="rounded-xl">
                            <SelectItem
                              value="Ch∆∞a li√™n h·ªá"
                              className="rounded-lg"
                            >
                              <div className="flex items-center space-x-2">
                                <div className="w-3 h-3 bg-gray-400 rounded-full"></div>
                                <span>Ch∆∞a li√™n h·ªá</span>
                              </div>
                            </SelectItem>
                            <SelectItem value="ƒêang g·ªçi" className="rounded-lg">
                              <div className="flex items-center space-x-2">
                                <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
                                <span>ƒêang g·ªçi</span>
                              </div>
                            </SelectItem>
                            <SelectItem
                              value="ƒê√£ li√™n h·ªá"
                              className="rounded-lg"
                            >
                              <div className="flex items-center space-x-2">
                                <div className="w-3 h-3 bg-green-400 rounded-full"></div>
                                <span>ƒê√£ li√™n h·ªá</span>
                              </div>
                            </SelectItem>
                            <SelectItem
                              value="Ph·ª• huynh"
                              className="rounded-lg"
                            >
                              <div className="flex items-center space-x-2">
                                <div className="w-3 h-3 bg-blue-400 rounded-full"></div>
                                <span>Ph·ª• huynh ƒëang ƒë·∫øn</span>
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              {/* Emergency Fields - Only show when priority is HIGH */}
              {isEmergencyMode && (
                <div className="bg-gradient-to-br from-red-50 via-pink-50 to-orange-50 border-2 border-red-200 rounded-2xl p-6 shadow-lg">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-10 h-10 bg-red-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-xl">üö®</span>
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-red-800">
                        Th√¥ng tin kh·∫©n c·∫•p
                      </h3>
                      <p className="text-red-600 text-sm">
                        Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin kh·∫©n c·∫•p
                      </p>
                    </div>
                  </div>

                  <div className="space-y-6">
                    <FormField
                      control={addEventForm.control}
                      name="immediateAction"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-red-700 font-semibold text-base">
                            üö® H√†nh ƒë·ªông t·ª©c th√¨ ƒë√£ th·ª±c hi·ªán
                          </FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="M√¥ t·∫£ chi ti·∫øt h√†nh ƒë·ªông kh·∫©n c·∫•p ƒë√£ th·ª±c hi·ªán..."
                              className="min-h-[100px] border-red-300 focus:border-red-500 rounded-xl resize-none bg-white/80"
                              {...field}
                            />
                          </FormControl>
                          <FormDescription className="text-red-600 flex items-center">
                            <span className="mr-2">üí°</span>
                            Ghi ch√©p ngay nh·ªØng h√†nh ƒë·ªông ƒë√£ th·ª±c hi·ªán ƒë·ªÉ x·ª≠ l√Ω
                            kh·∫©n c·∫•p
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={addEventForm.control}
                        name="notifyParent"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-4 space-y-0 p-4 bg-white/60 rounded-xl border border-red-200">
                            <FormControl>
                              <input
                                type="checkbox"
                                checked={field.value}
                                onChange={field.onChange}
                                className="mt-1 w-5 h-5 text-red-600 border-red-300 rounded focus:ring-red-500"
                              />
                            </FormControl>
                            <div className="space-y-2 leading-none">
                              <FormLabel className="text-red-700 font-semibold flex items-center text-base">
                                <span className="mr-2 text-lg">üìû</span>
                                Th√¥ng b√°o kh·∫©n c·∫•p cho ph·ª• huynh
                              </FormLabel>
                              <FormDescription className="text-red-600">
                                G·ª≠i SMS v√† g·ªçi ƒëi·ªán ngay l·∫≠p t·ª©c
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={addEventForm.control}
                        name="transferToHospital"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-4 space-y-0 p-4 bg-white/60 rounded-xl border border-red-200">
                            <FormControl>
                              <input
                                type="checkbox"
                                checked={field.value}
                                onChange={field.onChange}
                                className="mt-1 w-5 h-5 text-red-600 border-red-300 rounded focus:ring-red-500"
                              />
                            </FormControl>
                            <div className="space-y-2 leading-none">
                              <FormLabel className="text-red-700 font-semibold flex items-center text-base">
                                <span className="mr-2 text-lg">üè•</span>
                                C·∫ßn chuy·ªÉn b·ªánh vi·ªán
                              </FormLabel>
                              <FormDescription className="text-red-600">
                                Chu·∫©n b·ªã chuy·ªÉn vi·ªán kh·∫©n c·∫•p
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                    </div>

                    {addEventForm.watch("transferToHospital") && (
                      <FormField
                        control={addEventForm.control}
                        name="hospitalName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-red-700 font-semibold text-base">
                              üè• T√™n b·ªánh vi·ªán
                            </FormLabel>
                            <FormControl>
                              <Input
                                placeholder="Nh·∫≠p t√™n b·ªánh vi·ªán d·ª± ƒë·ªãnh chuy·ªÉn ƒë·∫øn..."
                                className="border-red-300 focus:border-red-500 rounded-xl bg-white/80"
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}

                    <FormField
                      control={addEventForm.control}
                      name="emergencyNotes"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-red-700 font-semibold text-base">
                            üìù Ghi ch√∫ kh·∫©n c·∫•p
                          </FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Ghi ch√©p th√™m th√¥ng tin kh·∫©n c·∫•p..."
                              className="min-h-[80px] border-red-300 focus:border-red-500 rounded-xl resize-none bg-white/80"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>
              )}

              <DialogFooter className="pt-6 border-t mt-8">
                <div className="flex items-center justify-between w-full">
                  <div className="flex items-center space-x-2 text-sm text-gray-500">
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    <span>H·ªá th·ªëng s·∫µn s√†ng</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => {
                        setAddEventOpen(false);
                        setIsEmergencyMode(false);
                      }}
                      className="px-6 py-2 rounded-xl border-gray-300 hover:bg-gray-50"
                    >
                      <span className="mr-2">‚ùå</span>
                      H·ªßy
                    </Button>
                    <Button
                      type="submit"
                      className={`font-bold px-8 py-2 rounded-xl transition-all duration-300 transform hover:scale-105 ${
                        isEmergencyMode
                          ? "bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white shadow-lg"
                          : "bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white shadow-lg"
                      }`}
                    >
                      {isEmergencyMode ? (
                        <>
                          <span className="mr-2 text-lg">üö®</span>
                          L∆ØU V√Ä X·ª¨ L√ù KH·∫®N C·∫§P
                        </>
                      ) : (
                        <>
                          <span className="mr-2">üíæ</span>
                          L∆∞u s·ª± ki·ªán
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Update Event Dialog */}
      <Dialog open={updateEventOpen} onOpenChange={setUpdateEventOpen}>
        <DialogContent className="max-w-4xl max-h-[95vh] rounded-3xl shadow-2xl overflow-hidden border-0 bg-gradient-to-br from-white to-gray-50">
          <DialogHeader className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white rounded-t-3xl shadow-lg">
            <div className="flex items-center space-x-4 p-6">
              <div className="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center">
                <AlertTriangle className="w-6 h-6 text-white" />
              </div>
              <div>
                <DialogTitle className="text-2xl font-bold">
                  ‚úèÔ∏è C·∫≠p nh·∫≠t s·ª± c·ªë y t·∫ø
                </DialogTitle>
                <DialogDescription className="mt-1 text-emerald-100">
                  C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt v·ªÅ s·ª± c·ªë y t·∫ø
                </DialogDescription>
              </div>
            </div>
          </DialogHeader>

          <Form {...updateEventForm}>
            <form
              onSubmit={updateEventForm.handleSubmit(onUpdateEvent)}
              className="space-y-4"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={updateEventForm.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Ti√™u ƒë·ªÅ s·ª± ki·ªán</FormLabel>
                      <FormControl>
                        <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={updateEventForm.control}
                  name="student"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>H·ªçc sinh</FormLabel>
                      <FormControl>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn h·ªçc sinh" />
                          </SelectTrigger>
                          <SelectContent>
                            {students.length === 0 ? (
                              <div className="p-2 text-gray-500 text-sm">
                                Kh√¥ng c√≥ h·ªçc sinh
                              </div>
                            ) : (
                              students.map((student: any) => {
                                const studentId =
                                  student.student?._id || student._id || "";
                                const studentName =
                                  student.student?.name ||
                                  student.name ||
                                  "Kh√¥ng r√µ";
                                return (
                                  <SelectItem key={studentId} value={studentId}>
                                    {studentName}
                                  </SelectItem>
                                );
                              })
                            )}
                          </SelectContent>
                        </Select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={updateEventForm.control}
                  name="class"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>L·ªõp</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn l·ªõp" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {availableClasses.length === 0 ? (
                            <div className="p-2 text-gray-500 text-sm">
                              Kh√¥ng c√≥ l·ªõp n√†o c√≥ h·ªçc sinh
                            </div>
                          ) : (
                            availableClasses.map((className) => (
                              <SelectItem key={className} value={className}>
                                {className}
                              </SelectItem>
                            ))
                          )}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={updateEventForm.control}
                  name="location"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>ƒê·ªãa ƒëi·ªÉm</FormLabel>
                      <FormControl>
                        <Input placeholder="ƒê·ªãa ƒëi·ªÉm x·∫£y ra" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={updateEventForm.control}
                  name="reporter"
                  render={({ field }) => {
                    // T√¨m staff theo ID
                    const staffId = field.value;
                    const staff = staffs.find((s) => s._id === staffId);
                    const staffName =
                      staff?.profile?.name ||
                      staff?.user?.email ||
                      "Kh√¥ng x√°c ƒë·ªãnh";
                    return (
                      <FormItem>
                        <FormLabel>Ng∆∞·ªùi b√°o c√°o</FormLabel>
                        <FormControl>
                          <Input
                            value={staffName}
                            disabled
                            className="bg-gray-50 text-gray-600"
                          />
                        </FormControl>
                        <FormDescription className="text-xs text-gray-500">
                          T·ª± ƒë·ªông l·∫•y t·ª´ ng∆∞·ªùi t·∫°o s·ª± ki·ªán, kh√¥ng th·ªÉ thay ƒë·ªïi
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    );
                  }}
                />

                <FormField
                  control={updateEventForm.control}
                  name="priority"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>M·ª©c ƒë·ªô ∆∞u ti√™n</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn m·ª©c ƒë·ªô" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Cao">Cao</SelectItem>
                          <SelectItem value="Trung b√¨nh">Trung b√¨nh</SelectItem>
                          <SelectItem value="Th·∫•p">Th·∫•p</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={updateEventForm.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>M√¥ t·∫£ chi ti·∫øt</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·ª± c·ªë y t·∫ø"
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={updateEventForm.control}
                name="contactStatus"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tr·∫°ng th√°i li√™n h·ªá ph·ª• huynh</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Tr·∫°ng th√°i li√™n h·ªá" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Ch∆∞a li√™n h·ªá">
                          Ch∆∞a li√™n h·ªá
                        </SelectItem>
                        <SelectItem value="ƒêang g·ªçi">ƒêang g·ªçi</SelectItem>
                        <SelectItem value="ƒê√£ li√™n h·ªá">ƒê√£ li√™n h·ªá</SelectItem>
                        <SelectItem value="Ph·ª• huynh">
                          Ph·ª• huynh ƒëang ƒë·∫øn
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <DialogFooter>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setUpdateEventOpen(false)}
                >
                  H·ªßy
                </Button>
                <Button type="submit" className="bg-teal-600 hover:bg-teal-700">
                  C·∫≠p nh·∫≠t
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Process Event Dialog */}
      <Dialog open={processEventOpen} onOpenChange={setProcessEventOpen}>
        <DialogContent className="max-w-2xl rounded-2xl shadow-2xl">
          <DialogHeader>
            <DialogTitle className="text-teal-800">
              X·ª≠ l√Ω s·ª± c·ªë y t·∫ø
            </DialogTitle>
            <DialogDescription className="text-teal-600">
              Ghi ch√∫ v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i x·ª≠ l√Ω s·ª± c·ªë y t·∫ø
            </DialogDescription>
          </DialogHeader>

          {selectedEvent && (
            <div className="mb-4 p-3 bg-gray-50 rounded-md">
              <h4 className="font-medium text-gray-800">
                {selectedEvent.title}
              </h4>
              <div className="text-sm text-gray-600 mt-1">
                <div>
                  {/* Safely access student name and class */}
                  {(() => {
                    if (
                      typeof selectedEvent.student === "object" &&
                      selectedEvent.student !== null
                    ) {
                      const studentName =
                        selectedEvent.student.name || "Kh√¥ng r√µ";
                      const studentClass =
                        typeof selectedEvent.student.class === "object"
                          ? selectedEvent.student.class?.name || "Kh√¥ng r√µ"
                          : selectedEvent.student.class || "Kh√¥ng r√µ";
                      return `${studentName} - ${studentClass}`;
                    }
                    return selectedEvent.student || "Kh√¥ng r√µ";
                  })()}
                </div>
                <div>
                  {selectedEvent.location} - {selectedEvent.time}
                </div>
              </div>
            </div>
          )}

          <Form {...processEventForm}>
            <form
              onSubmit={processEventForm.handleSubmit(onProcessEvent)}
              className="space-y-4"
            >
              {/* Hidden field for event ID */}
              <FormField
                control={processEventForm.control}
                name="_id"
                render={({ field }) => (
                  <FormItem className="hidden">
                    <FormControl>
                      <Input type="hidden" {...field} />
                    </FormControl>
                  </FormItem>
                )}
              />

              <FormField
                control={processEventForm.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tr·∫°ng th√°i x·ª≠ l√Ω</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Ch·ªçn tr·∫°ng th√°i" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="processing">ƒêang x·ª≠ l√Ω</SelectItem>
                        <SelectItem value="resolved">ƒê√£ gi·∫£i quy·∫øt</SelectItem>
                        <SelectItem value="pending">Ch·ªù x·ª≠ l√Ω</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={processEventForm.control}
                name="actionTaken"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>H√†nh ƒë·ªông ƒë√£ th·ª±c hi·ªán</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="M√¥ t·∫£ h√†nh ƒë·ªông ƒë√£ th·ª±c hi·ªán"
                        className="min-h-[80px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={processEventForm.control}
                name="contactParent"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                    <FormControl>
                      <input
                        type="checkbox"
                        checked={field.value}
                        onChange={field.onChange}
                        className="h-4 w-4 rounded border-gray-300 text-teal-600 focus:ring-teal-600"
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>ƒê√£ li√™n h·ªá ph·ª• huynh</FormLabel>
                      <FormDescription>
                        ƒê√°nh d·∫•u n·∫øu ƒë√£ li√™n h·ªá v·ªõi ph·ª• huynh v·ªÅ s·ª± ki·ªán n√†y
                      </FormDescription>
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={processEventForm.control}
                name="notes"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ghi ch√∫ b·ªï sung</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Th√™m ghi ch√∫ v·ªÅ t√¨nh tr·∫°ng h·ªçc sinh, h∆∞·ªõng d·∫´n ti·∫øp theo, v.v."
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <DialogFooter>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setProcessEventOpen(false)}
                >
                  H·ªßy
                </Button>
                <Button type="submit" className="bg-teal-600 hover:bg-teal-700">
                  Ho√†n t·∫•t x·ª≠ l√Ω
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* View Event Details Dialog */}
      <Dialog
        open={viewEventDetailsOpen}
        onOpenChange={setViewEventDetailsOpen}
      >
        <DialogContent className="max-w-2xl max-h-[90vh] rounded-3xl shadow-2xl overflow-hidden border-0 bg-gradient-to-br from-white to-gray-50">
          <DialogHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-t-3xl shadow-lg">
            <div className="flex items-center space-x-4 p-6">
              <div className="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center">
                <AlertTriangle className="w-6 h-6 text-white" />
              </div>
              <div className="flex-1">
                <DialogTitle className="text-2xl font-bold flex items-center gap-2">
                  <span>üëÅÔ∏è</span>
                  {String(
                    selectedEvent
                      ? selectedEvent.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"
                      : "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"
                  )}
                </DialogTitle>
                <DialogDescription className="mt-1 text-blue-100">
                  Th√¥ng tin chi ti·∫øt v·ªÅ s·ª± c·ªë y t·∫ø
                </DialogDescription>
              </div>
            </div>
          </DialogHeader>

          {selectedEvent && (
            <div className="space-y-6">
              {/* Th√¥ng tin t·ªïng quan */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 bg-sky-50 rounded-lg p-4 border">
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <User className="w-4 h-4 text-sky-700" />
                    <span className="font-medium text-gray-700">H·ªçc sinh:</span>
                    <span className="text-gray-800">
                      {(() => {
                        if (
                          typeof selectedEvent.student === "object" &&
                          selectedEvent.student !== null
                        ) {
                          return selectedEvent.student.name || "Kh√¥ng r√µ";
                        }
                        return String(selectedEvent.student || "Kh√¥ng r√µ");
                      })()}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Users className="w-4 h-4 text-sky-700" />
                    <span className="font-medium text-gray-700">L·ªõp:</span>
                    <span className="text-gray-800">
                      {(() => {
                        if (
                          typeof selectedEvent.class === "object" &&
                          selectedEvent.class !== null
                        ) {
                          return selectedEvent.class.name || "Kh√¥ng r√µ";
                        }
                        return String(selectedEvent.class || "Kh√¥ng r√µ");
                      })()}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <MapPin className="w-4 h-4 text-sky-700" />
                    <span className="font-medium text-gray-700">ƒê·ªãa ƒëi·ªÉm:</span>
                    <span className="text-gray-800">
                      {String(selectedEvent.location || "Kh√¥ng r√µ")}
                    </span>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <UserCheck className="w-4 h-4 text-sky-700" />
                    <span className="font-medium text-gray-700">
                      Ng∆∞·ªùi b√°o c√°o:
                    </span>
                    <span className="text-gray-800">
                      {(() => {
                        if (
                          typeof selectedEvent.staff === "object" &&
                          selectedEvent.staff !== null
                        ) {
                          // ∆Øu ti√™n profile.name, r·ªìi user.email
                          return (
                            selectedEvent.staff.profile?.name ||
                            selectedEvent.staff.user?.email ||
                            profile?.name ||
                            user?.email ||
                            "Kh√¥ng r√µ"
                          );
                        }
                        if (typeof selectedEvent.staff === "string") {
                          const staffObj = staffs.find(
                            (s) => s._id === selectedEvent.staff
                          );
                          return (
                            staffObj?.profile?.name ||
                            staffObj?.user?.email ||
                            profile?.name ||
                            user?.email ||
                            "Kh√¥ng r√µ"
                          );
                        }
                        return profile?.name || user?.email || "Kh√¥ng r√µ";
                      })()}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Flag className="w-4 h-4 text-sky-700" />
                    <span className="font-medium text-gray-700">
                      M·ª©c ƒë·ªô ∆∞u ti√™n:
                    </span>
                    <span className="text-gray-800">
                      {String(selectedEvent.priority || "Kh√¥ng r√µ")}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-sky-700" />
                    <span className="font-medium text-gray-700">
                      Th·ªùi gian:
                    </span>
                    <span className="text-gray-800">
                      {selectedEvent.createdAt
                        ? new Date(selectedEvent.createdAt).toLocaleString(
                            "vi-VN",
                            {
                              dateStyle: "full",
                              timeStyle: "medium",
                            }
                          )
                        : "Kh√¥ng r√µ"}
                    </span>
                  </div>
                </div>
              </div>

              {/* M√¥ t·∫£ */}
              <div className="bg-white rounded-lg border p-4">
                <h4 className="font-semibold text-gray-700 mb-1 flex items-center gap-2">
                  <FileText className="w-4 h-4 text-sky-700" />
                  M√¥ t·∫£ chi ti·∫øt
                </h4>
                <p className="text-gray-800">
                  {String(selectedEvent.description || "Kh√¥ng c√≥ m√¥ t·∫£")}
                </p>
              </div>

              {/* Tr·∫°ng th√°i li√™n h·ªá ph·ª• huynh */}
              <div className="bg-sky-50 rounded-lg border p-4 flex items-center gap-3">
                <PhoneCall className="w-5 h-5 text-teal-700" />
                <div>
                  <div className="font-semibold text-gray-700">
                    Tr·∫°ng th√°i li√™n h·ªá ph·ª• huynh
                  </div>
                  <div className="text-gray-800">
                    {(() => {
                      let contactStatus;
                      const validContactStatus = [
                        "Ch∆∞a li√™n h·ªá",
                        "ƒêang g·ªçi",
                        "ƒê√£ li√™n h·ªá",
                        "Ph·ª• huynh ƒëang ƒë·∫øn",
                      ];
                      if (
                        selectedEvent.contactStatus &&
                        validContactStatus.includes(selectedEvent.contactStatus)
                      ) {
                        contactStatus = selectedEvent.contactStatus;
                      } else if (selectedEvent.notes) {
                        const match = selectedEvent.notes.match(
                          /Contact Status: ([^|]+)/
                        );
                        if (
                          match &&
                          validContactStatus.includes(match[1].trim())
                        ) {
                          contactStatus = match[1].trim();
                        }
                      }
                      return contactStatus || "Kh√¥ng r√µ";
                    })()}
                  </div>
                </div>
              </div>
            </div>
          )}

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setViewEventDetailsOpen(false)}
            >
              ƒê√≥ng
            </Button>
            {!selectedEvent?.status && selectedEvent && (
              <Button
                onClick={() => {
                  setViewEventDetailsOpen(false);
                  handleProcessEvent(selectedEvent);
                }}
                className="bg-teal-600 hover:bg-teal-700"
              >
                X·ª≠ l√Ω s·ª± ki·ªán
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Emergency Process Dialog */}
      <Dialog
        open={emergencyProcessOpen}
        onOpenChange={setEmergencyProcessOpen}
      >
        <DialogContent className="max-w-2xl rounded-2xl shadow-2xl">
          <DialogHeader>
            <DialogTitle className="text-red-800">
              X·ª≠ l√Ω s·ª± ki·ªán kh·∫©n c·∫•p
            </DialogTitle>
            <DialogDescription className="text-red-600">
              H√†nh ƒë·ªông nhanh cho tr∆∞·ªùng h·ª£p c·∫ßn x·ª≠ l√Ω ngay
            </DialogDescription>
          </DialogHeader>

          {selectedEvent && (
            <div className="mb-4 p-3 bg-red-50 border border-red-100 rounded-md">
              <h4 className="font-medium text-red-800">
                {selectedEvent.title}
              </h4>
              <div className="text-sm text-red-700 mt-1">
                <div>
                  H·ªçc sinh:{" "}
                  {typeof selectedEvent.student === "object" &&
                  selectedEvent.student !== null
                    ? selectedEvent.student.name
                    : selectedEvent.student || "Kh√¥ng r√µ"}
                </div>
                <div>ƒê·ªãa ƒëi·ªÉm: {selectedEvent.location}</div>
              </div>
            </div>
          )}

          <Form {...emergencyProcessForm}>
            <form
              onSubmit={emergencyProcessForm.handleSubmit(onEmergencyProcess)}
              className="space-y-4"
            >
              <FormField
                control={emergencyProcessForm.control}
                name="immediateAction"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>H√†nh ƒë·ªông kh·∫©n c·∫•p ƒë√£ th·ª±c hi·ªán</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Nh·∫≠p h√†nh ƒë·ªông ƒë√£ th·ª±c hi·ªán ngay l·∫≠p t·ª©c"
                        className="min-h-[80px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={emergencyProcessForm.control}
                name="notifyParent"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                    <FormControl>
                      <input
                        type="checkbox"
                        checked={field.value}
                        onChange={field.onChange}
                        className="h-4 w-4 rounded border-gray-300 text-red-600 focus:ring-red-600"
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>Th√¥ng b√°o cho ph·ª• huynh</FormLabel>
                      <FormDescription>
                        ƒê√°nh d·∫•u n·∫øu ƒë√£ th√¥ng b√°o cho ph·ª• huynh v·ªÅ t√¨nh tr·∫°ng
                        kh·∫©n c·∫•p
                      </FormDescription>
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={emergencyProcessForm.control}
                name="transferToHospital"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                    <FormControl>
                      <input
                        type="checkbox"
                        checked={field.value}
                        onChange={(e) => {
                          field.onChange(e);
                          if (!e.target.checked) {
                            emergencyProcessForm.setValue("hospitalName", "");
                          }
                        }}
                        className="h-4 w-4 rounded border-gray-300 text-red-600 focus:ring-red-600"
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>Chuy·ªÉn ƒë·∫øn b·ªánh vi·ªán</FormLabel>
                      <FormDescription>
                        ƒê√°nh d·∫•u n·∫øu h·ªçc sinh ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn b·ªánh vi·ªán
                      </FormDescription>
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={emergencyProcessForm.control}
                name="hospitalName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>T√™n b·ªánh vi·ªán</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Nh·∫≠p t√™n b·ªánh vi·ªán"
                        {...field}
                        disabled={
                          !emergencyProcessForm.watch("transferToHospital")
                        }
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={emergencyProcessForm.control}
                name="notes"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ghi ch√∫ b·ªï sung</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Th√™m ghi ch√∫ v·ªÅ t√¨nh tr·∫°ng h·ªçc sinh, h√†nh ƒë·ªông ti·∫øp theo, v.v."
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <DialogFooter>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setEmergencyProcessOpen(false)}
                >
                  H·ªßy
                </Button>
                <Button type="submit" className="bg-red-600 hover:bg-red-700">
                  X√°c nh·∫≠n x·ª≠ l√Ω kh·∫©n c·∫•p
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  );
}
