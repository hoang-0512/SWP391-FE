"use client";

import { useState } from "react";
import { AlertTriangle, Phone, Hospital, User, Clock, MapPin, FileText } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const emergencyFormSchema = z.object({
  title: z.string().min(3, "Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±"),
  student: z.string().min(2, "Vui l√≤ng ch·ªçn h·ªçc sinh"),
  class: z.string().min(1, "Vui l√≤ng ch·ªçn l·ªõp"),
  location: z.string().min(1, "Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm"),
  priority: z.enum(["Cao", "Trung b√¨nh", "Th·∫•p"]),
  description: z.string().min(10, "M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±"),
  contactStatus: z.string().min(1, "Vui l√≤ng nh·∫≠p tr·∫°ng th√°i li√™n h·ªá"),
  // C√°c tr∆∞·ªùng kh·∫©n c·∫•p
  immediateAction: z.string().optional(),
  notifyParent: z.boolean(),
  transferToHospital: z.boolean(),
  hospitalName: z.string().optional(),
  emergencyNotes: z.string().optional(),
});

export default function EmergencyFormDemo() {
  const [priority, setPriority] = useState<"Cao" | "Trung b√¨nh" | "Th·∫•p">("Trung b√¨nh");
  const [isEmergency, setIsEmergency] = useState(false);
  const [selectedClass, setSelectedClass] = useState("");
  const [filteredStudents, setFilteredStudents] = useState([
    { id: "student1", name: "Nguy·ªÖn VƒÉn A", class: "L·ªõp 1A" },
    { id: "student2", name: "Tr·∫ßn Th·ªã B", class: "L·ªõp 1B" },
    { id: "student3", name: "L√™ VƒÉn C", class: "L·ªõp 2A" },
    { id: "student4", name: "Ph·∫°m Th·ªã D", class: "L·ªõp 1A" },
    { id: "student5", name: "Ho√†ng VƒÉn E", class: "L·ªõp 1B" },
    { id: "student6", name: "V≈© Th·ªã F", class: "L·ªõp 2A" },
  ]);
  const [allStudents] = useState([
    { id: "student1", name: "Nguy·ªÖn VƒÉn A", class: "L·ªõp 1A" },
    { id: "student2", name: "Tr·∫ßn Th·ªã B", class: "L·ªõp 1B" },
    { id: "student3", name: "L√™ VƒÉn C", class: "L·ªõp 2A" },
    { id: "student4", name: "Ph·∫°m Th·ªã D", class: "L·ªõp 1A" },
    { id: "student5", name: "Ho√†ng VƒÉn E", class: "L·ªõp 1B" },
    { id: "student6", name: "V≈© Th·ªã F", class: "L·ªõp 2A" },
  ]);

  const form = useForm<z.infer<typeof emergencyFormSchema>>({
    resolver: zodResolver(emergencyFormSchema),
    defaultValues: {
      title: "",
      student: "",
      class: "",
      location: "",
      priority: "Trung b√¨nh",
      description: "",
      contactStatus: "Ch∆∞a li√™n h·ªá",
      immediateAction: "",
      notifyParent: false,
      transferToHospital: false,
      hospitalName: "",
      emergencyNotes: "",
    },
  });

  const handlePriorityChange = (value: "Cao" | "Trung b√¨nh" | "Th·∫•p") => {
    setPriority(value);
    setIsEmergency(value === "Cao");
    form.setValue("priority", value);
  };

  const handleClassChange = (value: string) => {
    setSelectedClass(value);
    form.setValue("class", value);
    
    if (!value || value === "") {
      setFilteredStudents(allStudents);
      form.setValue("student", "");
      return;
    }
    
    // L·ªçc h·ªçc sinh theo l·ªõp ƒë√£ ch·ªçn
    const filtered = allStudents.filter((student) => student.class === value);
    setFilteredStudents(filtered);
    form.setValue("student", ""); // Reset student selection
  };

  const onSubmit = (data: z.infer<typeof emergencyFormSchema>) => {
    console.log("Form data:", data);
    alert("Demo: Form ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50 p-6">
      <div className="max-w-4xl mx-auto">
        <Card className={`transition-all duration-300 ${
          isEmergency 
            ? "border-2 border-red-500 bg-gradient-to-br from-red-50 to-pink-50 shadow-2xl" 
            : "border border-gray-200"
        }`}>
          <CardHeader className={`${
            isEmergency 
              ? "bg-gradient-to-r from-red-600 to-red-700 text-white rounded-t-lg" 
              : "bg-teal-600 text-white"
          }`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                {isEmergency ? (
                  <AlertTriangle className="w-8 h-8 animate-pulse" />
                ) : (
                  <FileText className="w-8 h-8" />
                )}
                <div>
                  <CardTitle className="text-2xl font-bold">
                    {isEmergency ? "üö® TH√äM S·ª∞ C·ªê KH·∫®N C·∫§P" : "Th√™m s·ª± c·ªë y t·∫ø"}
                  </CardTitle>
                  <p className="text-sm opacity-90">
                    {isEmergency 
                      ? "S·ª± c·ªë nghi√™m tr·ªçng - C·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c!" 
                      : "Nh·∫≠p th√¥ng tin v·ªÅ s·ª± c·ªë y t·∫ø m·ªõi"
                    }
                  </p>
                </div>
              </div>
              {isEmergency && (
                <Badge variant="destructive" className="text-lg px-4 py-2 animate-pulse">
                  ‚ö†Ô∏è KH·∫®N C·∫§P
                </Badge>
              )}
            </div>
          </CardHeader>

          <CardContent className="p-6">
            {/* Emergency Alert */}
            {isEmergency && (
              <div className="mb-6 p-4 bg-red-100 border-l-4 border-red-500 rounded-r-lg">
                <div className="flex items-center space-x-3">
                  <AlertTriangle className="w-6 h-6 text-red-600" />
                  <div>
                    <h4 className="font-bold text-red-800">‚ö†Ô∏è S·ª∞ C·ªê KH·∫®N C·∫§P</h4>
                    <p className="text-red-700 text-sm">
                      Vui l√≤ng x·ª≠ l√Ω ngay l·∫≠p t·ª©c v√† tu√¢n th·ªß quy tr√¨nh kh·∫©n c·∫•p!
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Emergency Checklist */}
            {isEmergency && (
              <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <h4 className="font-bold text-yellow-800 mb-3 flex items-center">
                  <Clock className="w-4 h-4 mr-2" />
                  ‚úÖ Checklist kh·∫©n c·∫•p:
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>ƒê√°nh gi√° t√¨nh tr·∫°ng h·ªçc sinh</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>G·ªçi c·∫•p c·ª©u (n·∫øu c·∫ßn)</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Li√™n h·ªá ph·ª• huynh ngay</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Chu·∫©n b·ªã chuy·ªÉn vi·ªán</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Ghi ch√©p ƒë·∫ßy ƒë·ªß</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Th√¥ng b√°o ban gi√°m hi·ªáu</span>
                  </div>
                </div>
              </div>
            )}

            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                {/* Basic Information */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="title"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className={isEmergency ? "text-red-700 font-semibold" : ""}>
                          Ti√™u ƒë·ªÅ s·ª± ki·ªán
                        </FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="Nh·∫≠p ti√™u ƒë·ªÅ" 
                            {...field}
                            className={isEmergency ? "border-red-300 focus:border-red-500" : ""}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="student"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className={isEmergency ? "text-red-700 font-semibold" : ""}>
                          H·ªçc sinh
                        </FormLabel>
                        <FormControl>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                          >
                            <SelectTrigger className={isEmergency ? "border-red-300" : ""}>
                              <SelectValue placeholder="Ch·ªçn h·ªçc sinh" />
                            </SelectTrigger>
                            <SelectContent>
                              {filteredStudents.length === 0 ? (
                                <div className="p-2 text-gray-500 text-sm">
                                  {selectedClass ? "Kh√¥ng c√≥ h·ªçc sinh trong l·ªõp n√†y" : "Vui l√≤ng ch·ªçn l·ªõp tr∆∞·ªõc"}
                                </div>
                              ) : (
                                filteredStudents.map((student) => (
                                  <SelectItem key={student.id} value={student.id}>
                                    {student.name} - {student.class}
                                  </SelectItem>
                                ))
                              )}
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="class"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className={isEmergency ? "text-red-700 font-semibold" : ""}>
                          L·ªõp
                        </FormLabel>
                        <Select
                          onValueChange={(value) => handleClassChange(value)}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className={isEmergency ? "border-red-300" : ""}>
                              <SelectValue placeholder="Ch·ªçn l·ªõp" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="L·ªõp 1A">L·ªõp 1A</SelectItem>
                            <SelectItem value="L·ªõp 1B">L·ªõp 1B</SelectItem>
                            <SelectItem value="L·ªõp 2A">L·ªõp 2A</SelectItem>
                            <SelectItem value="L·ªõp 2B">L·ªõp 2B</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="location"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className={isEmergency ? "text-red-700 font-semibold" : ""}>
                          ƒê·ªãa ƒëi·ªÉm
                        </FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="ƒê·ªãa ƒëi·ªÉm x·∫£y ra" 
                            {...field}
                            className={isEmergency ? "border-red-300 focus:border-red-500" : ""}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="priority"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className={isEmergency ? "text-red-700 font-semibold" : ""}>
                          M·ª©c ƒë·ªô ∆∞u ti√™n
                        </FormLabel>
                        <Select
                          onValueChange={(value: "Cao" | "Trung b√¨nh" | "Th·∫•p") => {
                            handlePriorityChange(value);
                            field.onChange(value);
                          }}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className={isEmergency ? "border-red-300" : ""}>
                              <SelectValue placeholder="Ch·ªçn m·ª©c ƒë·ªô" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Cao" className="text-red-600 font-semibold">
                              üö® Cao (Kh·∫©n c·∫•p)
                            </SelectItem>
                            <SelectItem value="Trung b√¨nh">‚ö° Trung b√¨nh</SelectItem>
                            <SelectItem value="Th·∫•p">üìã Th·∫•p</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="contactStatus"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className={isEmergency ? "text-red-700 font-semibold" : ""}>
                          Tr·∫°ng th√°i li√™n h·ªá ph·ª• huynh
                        </FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className={isEmergency ? "border-red-300" : ""}>
                              <SelectValue placeholder="Tr·∫°ng th√°i li√™n h·ªá" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Ch∆∞a li√™n h·ªá">Ch∆∞a li√™n h·ªá</SelectItem>
                            <SelectItem value="ƒêang g·ªçi">ƒêang g·ªçi</SelectItem>
                            <SelectItem value="ƒê√£ li√™n h·ªá">ƒê√£ li√™n h·ªá</SelectItem>
                            <SelectItem value="Ph·ª• huynh ƒëang ƒë·∫øn">Ph·ª• huynh ƒëang ƒë·∫øn</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Description */}
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className={isEmergency ? "text-red-700 font-semibold" : ""}>
                        M√¥ t·∫£ chi ti·∫øt
                      </FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·ª± c·ªë y t·∫ø"
                          className={`min-h-[100px] ${
                            isEmergency ? "border-red-300 focus:border-red-500" : ""
                          }`}
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Emergency Fields - Only show when priority is HIGH */}
                {isEmergency && (
                  <div className="space-y-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                    <h3 className="text-lg font-bold text-red-800 flex items-center">
                      <AlertTriangle className="w-5 h-5 mr-2" />
                      Th√¥ng tin kh·∫©n c·∫•p
                    </h3>

                    <FormField
                      control={form.control}
                      name="immediateAction"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-red-700 font-semibold">
                            H√†nh ƒë·ªông t·ª©c th√¨ ƒë√£ th·ª±c hi·ªán
                          </FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="M√¥ t·∫£ h√†nh ƒë·ªông kh·∫©n c·∫•p ƒë√£ th·ª±c hi·ªán..."
                              className="min-h-[80px] border-red-300 focus:border-red-500"
                              {...field}
                            />
                          </FormControl>
                          <FormDescription className="text-red-600">
                            Ghi ch√©p ngay nh·ªØng h√†nh ƒë·ªông ƒë√£ th·ª±c hi·ªán ƒë·ªÉ x·ª≠ l√Ω kh·∫©n c·∫•p
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="notifyParent"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                                className="mt-1"
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel className="text-red-700 font-semibold flex items-center">
                                <Phone className="w-4 h-4 mr-2" />
                                Th√¥ng b√°o kh·∫©n c·∫•p cho ph·ª• huynh
                              </FormLabel>
                              <FormDescription className="text-red-600">
                                G·ª≠i SMS v√† g·ªçi ƒëi·ªán ngay l·∫≠p t·ª©c
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="transferToHospital"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                                className="mt-1"
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel className="text-red-700 font-semibold flex items-center">
                                <Hospital className="w-4 h-4 mr-2" />
                                C·∫ßn chuy·ªÉn b·ªánh vi·ªán
                              </FormLabel>
                              <FormDescription className="text-red-600">
                                Chu·∫©n b·ªã chuy·ªÉn vi·ªán kh·∫©n c·∫•p
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                    </div>

                    {form.watch("transferToHospital") && (
                      <FormField
                        control={form.control}
                        name="hospitalName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-red-700 font-semibold">
                              T√™n b·ªánh vi·ªán
                            </FormLabel>
                            <FormControl>
                              <Input
                                placeholder="Nh·∫≠p t√™n b·ªánh vi·ªán d·ª± ƒë·ªãnh chuy·ªÉn ƒë·∫øn"
                                className="border-red-300 focus:border-red-500"
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}

                    <FormField
                      control={form.control}
                      name="emergencyNotes"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-red-700 font-semibold">
                            Ghi ch√∫ kh·∫©n c·∫•p
                          </FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Ghi ch√©p th√™m th√¥ng tin kh·∫©n c·∫•p..."
                              className="min-h-[60px] border-red-300 focus:border-red-500"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                )}

                {/* Form Actions */}
                <div className="flex justify-end space-x-4 pt-6 border-t">
                  <Button
                    type="button"
                    variant="outline"
                    className="px-6"
                  >
                    H·ªßy
                  </Button>
                  <Button 
                    type="submit" 
                    className={`px-6 font-bold ${
                      isEmergency 
                        ? "bg-red-600 hover:bg-red-700 text-white shadow-lg" 
                        : "bg-teal-600 hover:bg-teal-700"
                    }`}
                  >
                    {isEmergency ? (
                      <>
                        üö® L∆ØU V√Ä X·ª¨ L√ù KH·∫®N C·∫§P
                      </>
                    ) : (
                      "L∆∞u s·ª± ki·ªán"
                    )}
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>

        {/* Demo Instructions */}
        <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h4 className="font-bold text-blue-800 mb-2">üìã H∆∞·ªõng d·∫´n demo:</h4>
          <ul className="text-blue-700 text-sm space-y-1">
            <li>‚Ä¢ Ch·ªçn "M·ª©c ƒë·ªô ∆∞u ti√™n" = "Cao" ƒë·ªÉ xem giao di·ªán kh·∫©n c·∫•p</li>
            <li>‚Ä¢ Ch·ªçn "Trung b√¨nh" ho·∫∑c "Th·∫•p" ƒë·ªÉ xem giao di·ªán b√¨nh th∆∞·ªùng</li>
            <li>‚Ä¢ T√≠ch "C·∫ßn chuy·ªÉn b·ªánh vi·ªán" ƒë·ªÉ hi·ªán th√™m tr∆∞·ªùng b·ªánh vi·ªán</li>
            <li>‚Ä¢ ƒêi·ªÅn th√¥ng tin v√† b·∫•m "L∆∞u" ƒë·ªÉ xem demo</li>
          </ul>
        </div>
      </div>
    </div>
  );
} 